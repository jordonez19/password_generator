# Prueba T√©cnica - TechSupport Plurallüß°

Instrucciones

Resuelve los siguientes problemas aplicando tus conocimientos en estructuras de datos y SQL. Se evaluar√° tanto la eficiencia de tu soluci√≥n como la claridad en la explicaci√≥n de tu razonamiento. Tienes un tiempo l√≠mite de 1 hora para completar la prueba.

---

## **Parte 1: SQL**

### Problema 1: Producto con m√°s ingresos en los √∫ltimos 3 meses

Enunciado  
Tienes una tabla `ventas` con las siguientes columnas:

| id   | producto  | fecha_venta | cantidad | precio  |
|------|-----------|-------------|----------|---------|
| 1    | Televisor | 2024-06-15  | 3        | 500     |
| 2    | Laptop    | 2024-07-10  | 2        | 800     |
| 3    | Televisor | 2024-09-05  | 1        | 500     |
| 4    | Tel√©fono  | 2024-08-01  | 5        | 300     |




Escribe una consulta SQL para obtener el producto que gener√≥ m√°s ingresos (cantidad * precio) en los √∫ltimos 3 meses desde la fecha actual.

#### Ejemplo:
plaintext
Output: producto con m√°s ingresos

respuesta: 
    select  
        producto,
        sum(cantidad * precio) as total_price
    from 
        ventas
    where 
        fecha_venta >= date_sub( now(), interval 3 month)
    group by 
        producto 
    order by 
        total_price
    limit 1 


## **Parte 2: AWS**

Enunciado
Imagina que encuentras un aumento significativo en los costos sobre Dynamo. ¬øQu√© componentes de AWS revisar√≠as en primer lugar para identificar la causa ra√≠z de este incremento y qu√© m√©tricas espec√≠ficas buscar√≠as dentro de cada componente?

En dynamodb hay un servicio de monitoreo por el uso que se tiene como lo es ver el monitoreo de lectura y escritura y como se estan comportando las metricas,aparte de ello si se creo de una forma provisionada o de consumo por uso, aparte de ello es necesario mirar si se estan haciendo los filtros de busqueda de una forma apropiada, por ejp utilizando los indices para no tener que recorre cada fila en la tabla si no algo mas concreto y de esa forma optimizar la busqueda, incluso al crear una primary key y una sort key juntas siempre se optimizaran los filtros de busqueda.


##**Parte 3: Programaci√≥n**

Crear una aplicaci√≥n Node.js que genere contrase√±as seguras y personalizadas. La aplicaci√≥n debe permitir al usuario especificar los siguientes criterios:
‚óè	Longitud m√≠nima: El n√∫mero m√≠nimo de caracteres de la contrase√±a.
‚óè	Caracteres incluidos: Indicar si se deben incluir may√∫sculas, min√∫sculas, n√∫meros y caracteres especiales.
‚óè	Cantidad de contrase√±as: El n√∫mero de contrase√±as a generar.
Requisitos:
‚óè	Fortaleza: Las contrase√±as generadas deben ser aleatorias y cumplir con criterios de seguridad (combinaci√≥n de tipos de caracteres).
‚óè	Personalizaci√≥n: El usuario debe tener control total sobre la complejidad de la contrase√±a.
‚óè	Usabilidad: La interfaz de la aplicaci√≥n debe ser sencilla e intuitiva.
‚óè	Buenas pr√°cticas: Utilizar funciones, condicionales, bucles y estructuras de datos de manera eficiente.
‚óè	Modularidad: Dividir el c√≥digo en funciones peque√±as y reutilizables.
‚óè	Manejo de errores: Implementar mecanismos para manejar posibles errores, como entradas inv√°lidas.

